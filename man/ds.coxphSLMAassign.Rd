% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.coxphSLMAassign.R
\name{ds.coxphSLMAassign}
\alias{ds.coxphSLMAassign}
\title{Performs survival analysis using Cox proportional hazards model}
\usage{
ds.coxphSLMAassign(
  formula = NULL,
  dataName = NULL,
  weights = NULL,
  init = NULL,
  ties = "efron",
  singular.ok = TRUE,
  model = FALSE,
  x = FALSE,
  y = TRUE,
  control = NULL,
  datasources = NULL,
  objectname = NULL
)
}
\arguments{
\item{formula}{character string (potentially including \code{*} symbol without spaces) 
specifying the formula that you want to pass to the server-side.
For more information see \strong{Details}.}

\item{dataName}{character string of name of data frame}

\item{weights}{vector of case weights}

\item{init}{vector of initial values of the iteration.}

\item{ties}{character string specifying the method for tie handling. The Efron approximation is
used as the default. Other options are 'breslow' and 'exact'.}

\item{singular.ok}{logical value indicating how to handle collinearity in the model matrix.
Default is TRUE. If TRUE, the program will automatically skip over columns of the X matrix
that are linear combinations of earlier columns. In this case the coefficients of such
columns will be NA and the variance matrix will contain zeros.}

\item{model}{logical value. If TRUE, the model frame is returned in component model.}

\item{x}{logical value. If TRUE, the x matrix is returned in component x.}

\item{y}{logical value. If TRUE, the response vector is returned in component y.}

\item{control}{object of class survival::coxph.control() specifying iteration limit and 
other control options. Default is survival::coxph.control()}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. 
If the \code{datasources} argument is not specified
the default set of connections will be used: see \code{\link{datashield.connections_default}}.}

\item{objectname}{character name of server-side variable to store the 
Cox model}
}
\description{
Passes a formula to a server side environment and stores the
Cox proportional hazards model from the server.
}
\details{
This is a function that performs survival analysis using the Cox 
proportional hazards model. 

Server function called: \code{coxphSLMAassignDS}.
}
\examples{
\dontrun{

  ## Version 6
  
  # connecting to the Opal servers

  require('DSI')
  require('DSOpal')
  require('dsBaseClient')

  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING1", driver = "OpalDriver")
  builder$append(server = "study2", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "SURVIVAL.EXPAND_NO_MISSING3", driver = "OpalDriver")
  logindata <- builder$build()
  
  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D") 
  
  # make sure that the outcome is numeric 
  ds.asNumeric(x.name = "D$cens",
            newobj = "EVENT",
            datasources = connections)

  ds.asNumeric(x.name = "D$survtime",
            newobj = "SURVTIME",
            datasources = connections)

  dsBaseClient::ds.Surv(time='SURVTIME', event='EVENT', objectname='surv_object')

  dsBaseClient::ds.coxph.SLMA(formula = 'surv_object ~  D$female', 
            dataName = 'D', datasources = connections)

  dsBaseClient::ds.coxphSLMAassign(formula = 'surv_object ~  D$female',
             dataName = 'D', datasources = connections,
             objectname = 'coxph_serverside')
  
  # clear the Datashield R sessions and logout
  datashield.logout(connections)
}

}
\author{
Soumya Banerjee and Tom Bishop, 2020
}
